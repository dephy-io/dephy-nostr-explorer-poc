/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-argument */
import { useState } from "react";

import Head from "next/head";
import base58 from "bs58";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";

import * as RawMessage from "../proto/messages/dephy/message/RawMessage";
import * as SignedMessage from "../proto/messages/dephy/message/SignedMessage";
import * as PbPayload from "../proto/messages/dephy/stpw/PbPayload";

function encodeHex(uint8Array: Uint8Array) {
  return Array.from(uint8Array)
    .map((byte) => byte.toString(16).padStart(2, "0"))
    .join("");
}

interface Payload {
  from: string;
  currAvg: number;
  voltAvg: number;
  powerAvg: number;
  pfAvg: number;
  deltaEnerge: number;
  highTemp: number;
  bleMacList: Uint8Array[];
  wifiMacList: Uint8Array[];
  timestamp: string;
}

export default function Home() {
  const [url, setUrl] = useState("wss://relay-poc.dephy.io");
  const [ws, setWs] = useState<WebSocket | null>(null);
  const [datasource, setDatasource] = useState<Payload[]>([]);

  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setUrl(value);
  };

  const onQuery = async () => {
    ws?.send(JSON.stringify(["REQ", "89376", { limit: 100 }]));
  };

  const onConnect = async () => {
    if (ws && ws.readyState === ws.OPEN) {
      console.log(`Disconnect ${ws.url}`);
      ws.close();
    }

    const _ws = new WebSocket(url);
    setWs(_ws);

    console.log(`Connect ${_ws.url}`);

    _ws.onerror = (event) => {
      console.error(event);
    };
    _ws.onopen = (event) => {
      console.log(event);
    };
    _ws.onclose = (event) => {
      console.log(event);
    };
    _ws.onmessage = (event) => {
      // console.log(event.type, event.data);

      if (event.data) {
        const message: string[] = JSON.parse(event.data);
        const [type, subscriptionId, data] = message;

        if (typeof data === "object" && data !== null && "content" in data) {
          try {
            const content = (data as any).content;

            const decodedContent = SignedMessage.decodeBinary(
              base58.decode(content),
            );

            const rawMessage = RawMessage.decodeBinary(decodedContent.raw);
            console.log(rawMessage);

            const deviceEthAddress = `0x${encodeHex(rawMessage.fromAddress)}`;
            console.log(deviceEthAddress);

            const payload = PbPayload.decodeBinary(rawMessage.payload);
            console.log(payload);

            setDatasource([
              { from: deviceEthAddress, ...payload },
              ...datasource,
            ]);
          } catch (e) {
            console.error(e);
          }
        }
      }
    };
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        <div className="mb-4 flex items-center gap-4">
          <Label>Relay</Label>
          <Input value={url} onChange={onChange} placeholder="Relay" />
          <Button onClick={() => onConnect()}>Connect</Button>
          <Button disabled={!ws} onClick={() => onQuery()}>
            Query
          </Button>
        </div>
        <div className="p-5">
          {datasource.length ? (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>from</TableHead>
                  <TableHead>currAvg</TableHead>
                  <TableHead>voltAvg</TableHead>
                  <TableHead>powerAvg</TableHead>
                  <TableHead>pfAvg</TableHead>
                  <TableHead>deltaEnerge</TableHead>
                  <TableHead>highTemp</TableHead>
                  <TableHead>bleMacList</TableHead>
                  <TableHead>wifiMacList</TableHead>
                  <TableHead>timestamp</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {datasource.map(
                  (
                    {
                      from,
                      currAvg,
                      voltAvg,
                      powerAvg,
                      pfAvg,
                      deltaEnerge,
                      highTemp,
                      // bleMacList,
                      wifiMacList,
                      timestamp,
                    },
                    i,
                  ) => (
                    <TableRow key={i}>
                      <TableCell>{from}</TableCell>
                      <TableCell>{currAvg}</TableCell>
                      <TableCell>{voltAvg}</TableCell>
                      <TableCell>{powerAvg}</TableCell>
                      <TableCell>{pfAvg}</TableCell>
                      <TableCell>{deltaEnerge}</TableCell>
                      <TableCell>{highTemp}</TableCell>
                      {/* <TableCell>{bleMacList.join(", ")}</TableCell> */}
                      <TableCell>{wifiMacList.join(", ")}</TableCell>
                      <TableCell>{timestamp}</TableCell>
                    </TableRow>
                  ),
                )}
              </TableBody>
            </Table>
          ) : null}
        </div>
      </main>
    </>
  );
}
